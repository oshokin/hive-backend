version: '3'

services:
  hive-backend-db:
    image: postgres:alpine
    container_name: hive-backend-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_DB: hive
      POSTGRES_PASSWORD: hard-password
      LC_CTYPE: ru_RU.UTF-8
      LC_COLLATE: ru_RU.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - hive-backend-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin", "-d", "hive" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hive-backend-network

  hive-backend-app:
    container_name: hive-backend-app
    build:
      context: .
      dockerfile: Dockerfile
    image: hive-backend-app:latest
    restart: unless-stopped
    depends_on:
      hive-backend-db:
        condition: service_healthy
    ports:
      # port values must match with value stored in "HIVE_BACKEND_SERVER_PORT"
      - "8080:8080"
    environment:
      HIVE_BACKEND_LOG_LEVEL: INFO
      HIVE_BACKEND_SERVER_PORT: 8080
      HIVE_BACKEND_REQUEST_TIMEOUT: 5s
      HIVE_BACKEND_JWT_SECRET_KEY: lock-code-ends-with-42
      HIVE_BACKEND_FAKE_USER_PASSWORD: fixture-person
      HIVE_BACKEND_DB_HOST: hive-backend-db
      HIVE_BACKEND_DB_PORT: 5432
      HIVE_BACKEND_DB_NAME: hive
      HIVE_BACKEND_DB_USER: admin
      HIVE_BACKEND_DB_PASSWORD: hard-password
      HIVE_BACKEND_DB_MAX_CONNECTIONS: 10
      HIVE_BACKEND_DB_CONNECTION_LIFETIME: 1m
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/ping"
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hive-backend-network

  hive-backend-cadvisor:
    container_name: hive-backend-cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "9100:9100"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro # only for Linux
    command: [ "--port=9100" ]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9100/healthz"
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hive-backend-network

  hive-backend-prometheus:
    container_name: hive-backend-prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    depends_on:
      hive-backend-cadvisor:
        condition: service_started
      hive-backend-app:
        condition: service_healthy
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - hive-backend-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy"
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hive-backend-network

  hive-backend-grafana:
    container_name: hive-backend-grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    depends_on:
      hive-backend-prometheus:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./configs/grafana_dashboard.json:/var/lib/grafana/dashboards/grafana_dashboard.json
      - hive-backend-grafana-data:/var/lib/grafana
    networks:
      - hive-backend-network

networks:
  hive-backend-network:
    name: hive-backend-network
    driver: bridge

volumes:
  hive-backend-data:
    name: hive-backend-data
  hive-backend-prometheus-data:
    name: hive-backend-prometheus-data
  hive-backend-grafana-data:
    name: hive-backend-grafana-data
